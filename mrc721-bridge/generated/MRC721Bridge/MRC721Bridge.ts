// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddToken extends ethereum.Event {
  get params(): AddToken__Params {
    return new AddToken__Params(this);
  }
}

export class AddToken__Params {
  _event: AddToken;

  constructor(event: AddToken) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mintable(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get hasParameters(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get txId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromChain(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get txId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MRC721Bridge__getTxResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;
  value6: boolean;
  value7: Array<BigInt>;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address,
    value6: boolean,
    value7: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigIntArray(this.value7));
    return map;
  }
}

export class MRC721Bridge__txsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;

  constructor(value0: BigInt, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class MRC721Bridge extends ethereum.SmartContract {
  static bind(address: Address): MRC721Bridge {
    return new MRC721Bridge("MRC721Bridge", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  APP_ID(): BigInt {
    let result = super.call("APP_ID", "APP_ID():(uint32)", []);

    return result[0].toBigInt();
  }

  try_APP_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("APP_ID", "APP_ID():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TOKEN_ADDER_ROLE(): Bytes {
    let result = super.call(
      "TOKEN_ADDER_ROLE",
      "TOKEN_ADDER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_TOKEN_ADDER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TOKEN_ADDER_ROLE",
      "TOKEN_ADDER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _ERC721_RECEIVED(): Bytes {
    let result = super.call(
      "_ERC721_RECEIVED",
      "_ERC721_RECEIVED():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try__ERC721_RECEIVED(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "_ERC721_RECEIVED",
      "_ERC721_RECEIVED():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bridgeFee(): BigInt {
    let result = super.call("bridgeFee", "bridgeFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bridgeFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bridgeFee", "bridgeFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimedTxs(param0: BigInt, param1: BigInt): boolean {
    let result = super.call(
      "claimedTxs",
      "claimedTxs(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_claimedTxs(param0: BigInt, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimedTxs",
      "claimedTxs(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentChainID(): BigInt {
    let result = super.call(
      "getCurrentChainID",
      "getCurrentChainID():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentChainID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentChainID",
      "getCurrentChainID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTokenId(_addr: Address): BigInt {
    let result = super.call("getTokenId", "getTokenId(address):(uint256)", [
      ethereum.Value.fromAddress(_addr)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenId(_addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTokenId", "getTokenId(address):(uint256)", [
      ethereum.Value.fromAddress(_addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTx(_txId: BigInt): MRC721Bridge__getTxResult {
    let result = super.call(
      "getTx",
      "getTx(uint256):(uint256,uint256,uint256,uint256,address,address,bool,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_txId)]
    );

    return new MRC721Bridge__getTxResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBoolean(),
      result[7].toBigIntArray()
    );
  }

  try_getTx(_txId: BigInt): ethereum.CallResult<MRC721Bridge__getTxResult> {
    let result = super.tryCall(
      "getTx",
      "getTx(uint256):(uint256,uint256,uint256,uint256,address,address,bool,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_txId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MRC721Bridge__getTxResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBoolean(),
        value[7].toBigIntArray()
      )
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ids(param0: Address): BigInt {
    let result = super.call("ids", "ids(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ids(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ids", "ids(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastTxId(): BigInt {
    let result = super.call("lastTxId", "lastTxId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastTxId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastTxId", "lastTxId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintable(param0: BigInt): boolean {
    let result = super.call("mintable", "mintable(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_mintable(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintable", "mintable(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  muon(): Address {
    let result = super.call("muon", "muon():(address)", []);

    return result[0].toAddress();
  }

  try_muon(): ethereum.CallResult<Address> {
    let result = super.tryCall("muon", "muon():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  network(): BigInt {
    let result = super.call("network", "network():(uint256)", []);

    return result[0].toBigInt();
  }

  try_network(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("network", "network():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pendingTxs(fromChain: BigInt, _ids: Array<BigInt>): Array<boolean> {
    let result = super.call(
      "pendingTxs",
      "pendingTxs(uint256,uint256[]):(bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(fromChain),
        ethereum.Value.fromUnsignedBigIntArray(_ids)
      ]
    );

    return result[0].toBooleanArray();
  }

  try_pendingTxs(
    fromChain: BigInt,
    _ids: Array<BigInt>
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "pendingTxs",
      "pendingTxs(uint256,uint256[]):(bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(fromChain),
        ethereum.Value.fromUnsignedBigIntArray(_ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferParameters(param0: BigInt): boolean {
    let result = super.call(
      "transferParameters",
      "transferParameters(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_transferParameters(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferParameters",
      "transferParameters(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  txs(param0: BigInt): MRC721Bridge__txsResult {
    let result = super.call("txs", "txs(uint256):(uint256,uint256,address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new MRC721Bridge__txsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_txs(param0: BigInt): ethereum.CallResult<MRC721Bridge__txsResult> {
    let result = super.tryCall(
      "txs",
      "txs(uint256):(uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MRC721Bridge__txsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _muon(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _mintable(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _transferParameters(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class AdminWithdrawTokensCall extends ethereum.Call {
  get inputs(): AdminWithdrawTokensCall__Inputs {
    return new AdminWithdrawTokensCall__Inputs(this);
  }

  get outputs(): AdminWithdrawTokensCall__Outputs {
    return new AdminWithdrawTokensCall__Outputs(this);
  }
}

export class AdminWithdrawTokensCall__Inputs {
  _call: AdminWithdrawTokensCall;

  constructor(call: AdminWithdrawTokensCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AdminWithdrawTokensCall__Outputs {
  _call: AdminWithdrawTokensCall;

  constructor(call: AdminWithdrawTokensCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get nftId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get nftParams(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get txParams(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _reqId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _sigs(): Array<ClaimCall_sigsStruct> {
    return this._call.inputValues[4].value.toTupleArray<ClaimCall_sigsStruct>();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall_sigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class ClaimForCall extends ethereum.Call {
  get inputs(): ClaimForCall__Inputs {
    return new ClaimForCall__Inputs(this);
  }

  get outputs(): ClaimForCall__Outputs {
    return new ClaimForCall__Outputs(this);
  }
}

export class ClaimForCall__Inputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get nftParams(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get txParams(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _reqId(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _sigs(): Array<ClaimForCall_sigsStruct> {
    return this._call.inputValues[5].value.toTupleArray<
      ClaimForCall_sigsStruct
    >();
  }
}

export class ClaimForCall__Outputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }
}

export class ClaimForCall_sigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get nftId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get toChain(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawERC721TokensCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawERC721TokensCall__Inputs {
    return new EmergencyWithdrawERC721TokensCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawERC721TokensCall__Outputs {
    return new EmergencyWithdrawERC721TokensCall__Outputs(this);
  }
}

export class EmergencyWithdrawERC721TokensCall__Inputs {
  _call: EmergencyWithdrawERC721TokensCall;

  constructor(call: EmergencyWithdrawERC721TokensCall) {
    this._call = call;
  }

  get _tokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EmergencyWithdrawERC721TokensCall__Outputs {
  _call: EmergencyWithdrawERC721TokensCall;

  constructor(call: EmergencyWithdrawERC721TokensCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetBridgeFeeCall extends ethereum.Call {
  get inputs(): SetBridgeFeeCall__Inputs {
    return new SetBridgeFeeCall__Inputs(this);
  }

  get outputs(): SetBridgeFeeCall__Outputs {
    return new SetBridgeFeeCall__Outputs(this);
  }
}

export class SetBridgeFeeCall__Inputs {
  _call: SetBridgeFeeCall;

  constructor(call: SetBridgeFeeCall) {
    this._call = call;
  }

  get _val(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBridgeFeeCall__Outputs {
  _call: SetBridgeFeeCall;

  constructor(call: SetBridgeFeeCall) {
    this._call = call;
  }
}

export class SetNetworkIDCall extends ethereum.Call {
  get inputs(): SetNetworkIDCall__Inputs {
    return new SetNetworkIDCall__Inputs(this);
  }

  get outputs(): SetNetworkIDCall__Outputs {
    return new SetNetworkIDCall__Outputs(this);
  }
}

export class SetNetworkIDCall__Inputs {
  _call: SetNetworkIDCall;

  constructor(call: SetNetworkIDCall) {
    this._call = call;
  }

  get _network(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNetworkIDCall__Outputs {
  _call: SetNetworkIDCall;

  constructor(call: SetNetworkIDCall) {
    this._call = call;
  }
}
