// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transaction extends ethereum.Event {
  get params(): Transaction__Params {
    return new Transaction__Params(this);
  }
}

export class Transaction__Params {
  _event: Transaction;

  constructor(event: Transaction) {
    this._event = event;
  }

  get reqId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get groups(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class MuonV02__groupsPubKeyResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class MuonV02__verifyInput_sigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class MuonV02 extends ethereum.SmartContract {
  static bind(address: Address): MuonV02 {
    return new MuonV02("MuonV02", address);
  }

  groupsPubKey(param0: Address): MuonV02__groupsPubKeyResult {
    let result = super.call(
      "groupsPubKey",
      "groupsPubKey(address):(uint256,uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new MuonV02__groupsPubKeyResult(
      result[0].toBigInt(),
      result[1].toI32()
    );
  }

  try_groupsPubKey(
    param0: Address
  ): ethereum.CallResult<MuonV02__groupsPubKeyResult> {
    let result = super.tryCall(
      "groupsPubKey",
      "groupsPubKey(address):(uint256,uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MuonV02__groupsPubKeyResult(value[0].toBigInt(), value[1].toI32())
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verify(
    _reqId: Bytes,
    _hash: BigInt,
    _sigs: Array<MuonV02__verifyInput_sigsStruct>
  ): boolean {
    let result = super.call(
      "verify",
      "verify(bytes,uint256,(uint256,address,address)[]):(bool)",
      [
        ethereum.Value.fromBytes(_reqId),
        ethereum.Value.fromUnsignedBigInt(_hash),
        ethereum.Value.fromTupleArray(_sigs)
      ]
    );

    return result[0].toBoolean();
  }

  try_verify(
    _reqId: Bytes,
    _hash: BigInt,
    _sigs: Array<MuonV02__verifyInput_sigsStruct>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verify",
      "verify(bytes,uint256,(uint256,address,address)[]):(bool)",
      [
        ethereum.Value.fromBytes(_reqId),
        ethereum.Value.fromUnsignedBigInt(_hash),
        ethereum.Value.fromTupleArray(_sigs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _schnorrLib(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _groupAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _groupPubKeyX(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _groupPubKeyYParity(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddGroupPublicKeyCall extends ethereum.Call {
  get inputs(): AddGroupPublicKeyCall__Inputs {
    return new AddGroupPublicKeyCall__Inputs(this);
  }

  get outputs(): AddGroupPublicKeyCall__Outputs {
    return new AddGroupPublicKeyCall__Outputs(this);
  }
}

export class AddGroupPublicKeyCall__Inputs {
  _call: AddGroupPublicKeyCall;

  constructor(call: AddGroupPublicKeyCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pubX(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _pubYParity(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class AddGroupPublicKeyCall__Outputs {
  _call: AddGroupPublicKeyCall;

  constructor(call: AddGroupPublicKeyCall) {
    this._call = call;
  }
}

export class RemoveGroupPublicKeyCall extends ethereum.Call {
  get inputs(): RemoveGroupPublicKeyCall__Inputs {
    return new RemoveGroupPublicKeyCall__Inputs(this);
  }

  get outputs(): RemoveGroupPublicKeyCall__Outputs {
    return new RemoveGroupPublicKeyCall__Outputs(this);
  }
}

export class RemoveGroupPublicKeyCall__Inputs {
  _call: RemoveGroupPublicKeyCall;

  constructor(call: RemoveGroupPublicKeyCall) {
    this._call = call;
  }

  get _groupAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveGroupPublicKeyCall__Outputs {
  _call: RemoveGroupPublicKeyCall;

  constructor(call: RemoveGroupPublicKeyCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetLibAddressCall extends ethereum.Call {
  get inputs(): SetLibAddressCall__Inputs {
    return new SetLibAddressCall__Inputs(this);
  }

  get outputs(): SetLibAddressCall__Outputs {
    return new SetLibAddressCall__Outputs(this);
  }
}

export class SetLibAddressCall__Inputs {
  _call: SetLibAddressCall;

  constructor(call: SetLibAddressCall) {
    this._call = call;
  }

  get _schnorrLib(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLibAddressCall__Outputs {
  _call: SetLibAddressCall;

  constructor(call: SetLibAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VerifyCall extends ethereum.Call {
  get inputs(): VerifyCall__Inputs {
    return new VerifyCall__Inputs(this);
  }

  get outputs(): VerifyCall__Outputs {
    return new VerifyCall__Outputs(this);
  }
}

export class VerifyCall__Inputs {
  _call: VerifyCall;

  constructor(call: VerifyCall) {
    this._call = call;
  }

  get _reqId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _hash(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _sigs(): Array<VerifyCall_sigsStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      VerifyCall_sigsStruct
    >();
  }
}

export class VerifyCall__Outputs {
  _call: VerifyCall;

  constructor(call: VerifyCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class VerifyCall_sigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}
