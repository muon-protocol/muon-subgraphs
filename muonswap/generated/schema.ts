// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TxEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txId", Value.fromBigInt(BigInt.zero()));
    this.set("amount0", Value.fromBigInt(BigInt.zero()));
    this.set("amount1", Value.fromBigInt(BigInt.zero()));
    this.set("amount0Min", Value.fromBigInt(BigInt.zero()));
    this.set("amount1Min", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("addr", Value.fromBytes(Bytes.empty()));
    this.set("time", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TxEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TxEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TxEntity", id.toString(), this);
    }
  }

  static load(id: string): TxEntity | null {
    return changetype<TxEntity | null>(store.get("TxEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txId(): BigInt {
    let value = this.get("txId");
    return value!.toBigInt();
  }

  set txId(value: BigInt) {
    this.set("txId", Value.fromBigInt(value));
  }

  get amount0(): BigInt {
    let value = this.get("amount0");
    return value!.toBigInt();
  }

  set amount0(value: BigInt) {
    this.set("amount0", Value.fromBigInt(value));
  }

  get amount1(): BigInt {
    let value = this.get("amount1");
    return value!.toBigInt();
  }

  set amount1(value: BigInt) {
    this.set("amount1", Value.fromBigInt(value));
  }

  get amount0Min(): BigInt {
    let value = this.get("amount0Min");
    return value!.toBigInt();
  }

  set amount0Min(value: BigInt) {
    this.set("amount0Min", Value.fromBigInt(value));
  }

  get amount1Min(): BigInt {
    let value = this.get("amount1Min");
    return value!.toBigInt();
  }

  set amount1Min(value: BigInt) {
    this.set("amount1Min", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get addr(): Bytes {
    let value = this.get("addr");
    return value!.toBytes();
  }

  set addr(value: Bytes) {
    this.set("addr", Value.fromBytes(value));
  }

  get deposit_tx(): Bytes | null {
    let value = this.get("deposit_tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set deposit_tx(value: Bytes | null) {
    if (!value) {
      this.unset("deposit_tx");
    } else {
      this.set("deposit_tx", Value.fromBytes(<Bytes>value));
    }
  }

  get claim_tx(): Bytes | null {
    let value = this.get("claim_tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set claim_tx(value: Bytes | null) {
    if (!value) {
      this.unset("claim_tx");
    } else {
      this.set("claim_tx", Value.fromBytes(<Bytes>value));
    }
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value!.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get _type(): i32 {
    let value = this.get("_type");
    return value!.toI32();
  }

  set _type(value: i32) {
    this.set("_type", Value.fromI32(value));
  }
}
